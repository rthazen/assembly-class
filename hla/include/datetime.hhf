
#if( ! @defined( datetime_hhf ));
?datetime_hhf := true;

#includeonce( "hla.hhf" )
namespace time; @fast;

	type

		timerec:
			record;

				secs:uns8;
				mins:uns8;
				hours:uns16;

			endrecord;

	// _isTimeRec_-
	//
	//	This is a utility macro that returns true or false
	//	depending upon whether the parameter is a time.timerec
	//	object.  This is for internal use within this header file.
	 
	#macro _isTimeRec_( _tr_ );

		#if( @typename( _tr_ ) = "timerec" )

			#if
			( 
					@defined( _tr_.hours ) 
				&	@defined( _tr_.mins ) 
				&	@defined( _tr_.secs )
			)

				true

			#else

				false

			#endif

		#else

			false

		#endif

	#endmacro;


	procedure curTime( var HMS:timerec );
		@external( "TIME_CURTIME" );

	procedure secsToHMS( seconds:uns32; var HMS:timerec ); 
		@external( "TIME_SECSTOHMS" );

	procedure _HMStoSecs( HMS:timerec );
		@external( "TIME_HMSTOSECS" );


	#macro hmsToSecs( _h_, _ms_[] );

		#if( @elements( _ms_ ) = 0 )

			// _h_ had better be a timerec object
			// if we had only one parameter.

			#if( time._isTimeRec_( _h_ ) )

				time._HMStoSecs( _h_ )

			#else

				#error
				( 
					"HMStoSecs expected a timerec type as the parameter" 
				)

			#endif

		#elseif( @elements( _ms_ ) = 2 )

			time._HMStoSecs
			(
				#{
					pushw( _h_ );
					push( ax );
					push( eax );
					mov( @text(_ms_[0]), ah );
					mov( @text(_ms_[1]), al );
					mov( eax, [esp+4] );
					pop( eax );
				}#
			)

		#else

			#error
			( 
				"Error in HMStoSecs parameter list" 
			)

		#endif

	#endmacro;

end time;


namespace date;

	type
		daterec:  
			record

				day:uns8;
				month:uns8;
				year:uns16;
			
			endrecord;

		OutputFormat: 	enum
						{ 
							mdyy,
							mdyyyy,

							mmddyy,
							mmddyyyy,

							yymd,
							yyyymd,
							yymmdd,
							yyyymmdd, 

							MONdyyyy, 
							MONTHdyyyy 
						};



	// _isDateRec_-
	//
	//	This is a utility macro that returns true or false
	//	depending upon whether the parameter is a date.daterec
	//	object.  This is for internal use within this header file.
	 
	#macro _isDateRec_( _dr_ );

		#if( @typename( _dr_ ) = "daterec" )

			#if
			( 
					@defined( _dr_.month ) 
				&	@defined( _dr_.day ) 
				&	@defined( _dr_.year )
			)

				true

			#else

				false

			#endif

		#else

			false

		#endif

	#endmacro;


	// _isMDY_
	//
	// This is another utility macro.  It checks its parameters
	// to ensure that they are all valid m.d.y types.

	#macro _isMDY_( _m_, _d_, _y_ ):_error_;

		?_error_ :=
				!hla.isNumber( _m_ ) 
			|	!hla.isNumber( _d_)
			|	!hla.isNumber( _y_);

		#if( !_error_ )

			?_error_ :=
					( !@IsConst( _m_ ) & @size( _m_ ) <> 1 )
				|	( !@IsConst( _d_ ) & @size( _d_ ) <> 1 )
				|	( !@IsConst( _y_ ) & @size( _y_ ) <> 2 );

		#endif
		(!_error_)

	#endmacro;


	// date.unpack-
	//
	//	The first parameter is a date.daterec object.  The remaining
	//	parameters are dword objects.  This macro unpacks the date
	//	in the daterec parameter into its constituent parts.
	//	No range checking is done on the date value.

	#macro unpack( dr, y, m, d );

		#if( !date._isDateRec_( dr ) )

			#error( "Expected a date.daterec type as the 1st parameter" )

		#elseif
		( 
				!( hla.IsNumber( y ) & @size(y) = 4 )
			&	!( hla.IsNumber( m ) & @size(m) = 4 )
			&	!( hla.IsNumber( d ) & @size(y) = 4 )
		)

			#error( "Month, Day, and Year values must be dword objects" )

		#else

			push( eax );
			movzx( dr.d, eax );
			mov( eax, d );
			movzx( dr.m, eax );
			mov( eax, m );
			movzx( dr.y, eax );
			mov( eax, y );
			pop( eax );

		#endif

	#endmacro;
	

	// date.pack-
	//
	//	This macro takes three dword objects representing the
	//	month, day, and year and packs these values into a
	//	daterec variable.  No range checking is done on the
	//	date value.

	#macro pack( y, m, d, dr );

		#if( !date._isDateRec_( dr ))

			#error( "Expected a date.daterec type as the 4th parameter" )

		#elseif
		( 
				!( hla.IsNumber( y ) & @size(y) = 4 )
			&	!( hla.IsNumber( m ) & @size(m) = 4 )
			&	!( hla.IsNumber( d ) & @size(y) = 4 )
		)

			#error( "Month, Day, and Year values must be dword objects" )

		#else

			push( eax );
			mov( (byte ptr dr.day), al );
			mov( (byte ptr dr.month), ah );
			mov( ax, (word ptr dr.day) );
			mov( (word ptr y), ax );
			mov( ax, dr.year );
			pop( eax );

		#endif

	#endmacro;
	







	procedure today( var todaysDate:daterec ); @external( "DATE_TODAY" );
	procedure setSeparator( c:char ); @external( "DATE_SETSEPARATOR" );
	procedure setFormat( f:OutputFormat ); @external( "DATE_SETFORMAT" );

	procedure datePlusDays( days:uns32; var theDate:daterec ); 
		@external( "DATE_DATEPLUSDAYS" );

	procedure datePlusMonths( months:uns32; var theDate:daterec ); 
		@external( "DATE_DATEPLUSMONTHS" );

	procedure fromJulian( Julian:uns32; var Gregorian:daterec );
		@external( "DATE_FROMJULIAN" ); 










	// IsLeapYear-
	//
	//	Returns true in AL if the date/year passed as a parameter
	//	is a leap year, false otherwise.
	//
	//	Note that IsLeapYear is a macro that overloads the _IsLeapYear
	//	procedure allowing either a date.daterec, word, or dword parameter.

	procedure _IsLeapYear( Year:word ); 
		@returns( "al" ); 
		@external( "DATE_ISLEAPYEAR" );

	#macro isLeapYear( _y_ily_ );

		#if( date._isDateRec_( _y_ily_ ))

			date._IsLeapYear( _y_ily_.year )

		#elseif( @IsConst( _y_ily_ ))

			date._IsLeapYear( #{ pushd( _y_ily_ ); }# )

		#elseif( hla.isNumber( _y_ily_ ) & @size(_y_ily_) = 2 )
		
			date._IsLeapYear( #{ pushw(0); pushw( _y_ily_ ); }# )
			 
		#elseif( hla.isNumber( _y_ily_ ) & @size(_y_ily_) = 4 )
		
			date._IsLeapYear( #{ push( _y_ily_ ); }# )
			 
		#else

			#error( "IsLeapYear parameter error" )

		#endif

	#endmacro;



	// validate-
	//
	//	Checks the date passed as a parameter to see if it is valid.
	//	Raises the "ex.InvalidDate" exception if it is not valid.
	//
	//	Note that date.validate is a macro that overloads the
	//	date._validate procedure, allowing a daterec or (m,d,y)
	//	parameters to be passed.

	procedure _validate( dr:daterec ); 
		@external( "DATE_VALIDATE" );

	#macro validate( _m_, _dy_[] );

		#if( @elements( _dy_ ) = 0 )

			// y had better be a daterec object
			// if we had only one parameter.


			#if( date._isDateRec_( _m_ ))

				date._validate( _m_ )

			#else

				#error( "Expected a daterec type as the parameter" )

			#endif

		#elseif( @elements( _dy_ ) = 2 )


			#if( date._isMDY_( _m_, @text( _dy_[0]), @text( _dy_[1])))

				date._validate
				(
					#{
						pushw( @text(_dy_[1]) );
						push( ax );
						push( eax );
						mov( @text(_dy_[0]), al );
						mov( _m_, ah );
						mov( ax, [esp+4] );
						pop( eax );
					}#
				)

			#else

				#error( "Syntax error in validate parameter list" );

			#endif

		#else

			#error
			( 
				"Error in date.validate parameter list" nl
				"Usage: date.validate( dr:daterec ) or " nl
				"       date.validate( m:word; d:word; y:word )"
			)

		#endif

	#endmacro;





	// IsValid-
	//
	//	Checks the date passed as a parameter to see if it is valid.
	//	Returns true/false in AL to denote the validity of the parameter.
	//
	//	Note that date.IsValid is a macro that overloads the
	//	date._IsValid procedure, allowing a daterec or (m,d,y)
	//	parameters to be passed.

	procedure _IsValid( dr:daterec );
		@returns( "al" ); 
		@external( "DATE_ISVALID" );

	#macro isValid( _m_, _dy_[] );

		#if( @elements( _dy_ ) = 0 )

			// y had better be a daterec object
			// if we had only one parameter.


			#if( date._isDateRec_( _m_ ) )

				date._IsValid( _m_ )

			#else

				#error( "Expected a daterec type as the parameter" )

			#endif

		#elseif( @elements( _dy_ ) = 2 )


			#if( date._isMDY_( _m_, @text( _dy_[0] ), @text( _dy_[1])))

				date._IsValid
				(
					#{
						pushw( @text(_dy_[1]) );
						push( ax );
						push( eax );
						mov( @text(_dy_[0]), al );
						mov( _m_, ah );
						mov( ax, [esp+4] );
						pop( eax );
					}#
				)

			#else

				#error( "Syntax error in IsValid parameter list" )

			#endif

		#else

			#error
			( 
				"Error in date.IsValid parameter list" nl
				"Usage: date.IsValid( dr:daterec ) or " nl
				"       date.IsValid( m:word; d:word; y:word )"
			)

		#endif

	#endmacro;








	procedure _Julian( dr:daterec ); 
		@returns( "eax" );
		@external( "DATE_JULIAN" );

	#macro julian( _m_, _dy_[] );

		#if( @elements( _dy_ ) = 0 )

			// y had better be a daterec object
			// if we had only one parameter.

			#if( date._isDateRec_( _m_ ) )

				date._Julian( _m_ )

			#else

				#error( "Julian expected a daterec type as the parameter" )

			#endif

		#elseif( @elements( _dy_ ) = 2 )

			#if( date._isMDY_( _m_, @text( _dy_[0] ), @text( _dy_[1])) )

				date._Julian
				(
					#{
						pushw( @text(_dy_[1]) );
						push( ax );
						push( eax );
						mov( @text(_dy_[0]), al );
						mov( _m_, ah );
						mov( ax, [esp+4] );
						pop( eax );
					}#
				)

			#else

				#error( "Syntax error in Julian parameter list" );

			#endif

		#else

			#error
			( 
				"Error in Julian parameter list" nl
				"Usage: Julian( dr:daterec ) or " nl
				"       Julian( m:word; d:word; y:word )"
			)

		#endif

	#endmacro;
















	procedure _dayOfWeek( dr:daterec ); 
		@returns( "eax" );
		@external( "DATE_DAYOFWEEK" );

	#macro dayOfWeek( _m_, _dy_[] );

		#if( @elements( _dy_ ) = 0 )

			// y had better be a daterec object
			// if we had only one parameter.

			#if( date._isDateRec_( _m_ ) )

				date._dayOfWeek( _m_ )

			#else

				#error
				( 
					"dayOfWeek expected a daterec type as the parameter" 
				)

			#endif

		#elseif( @elements( _dy_ ) = 2 )

			#if( date._isMDY_( _m_, @text( _dy_[0] ), @text( _dy_[1])) )

				date._dayOfWeek
				(
					#{
						pushw( @text(_dy_[1]) );
						push( ax );
						push( eax );
						mov( @text(_dy_[0]), al );
						mov( _m_, ah );
						mov( ax, [esp+4] );
						pop( eax );
					}#
				)

			#else

				#error( "Syntax error in dayOfWeek parameter list" );

			#endif

		#else

			#error
			( 
				"Error in dayOfWeek parameter list" nl
				"Usage: dayOfWeek( dr:daterec ) or " nl
				"       dayOfWeek( m:word; d:word; y:word )"
			)

		#endif

	#endmacro;













	procedure _dayNumber( dr:daterec ); 
		@returns( "eax" );
		@external( "DATE_DAYNUMBER" );

	#macro dayNumber( _m_, _dy_[] );

		#if( @elements( _dy_ ) = 0 )

			// y had better be a daterec object
			// if we had only one parameter.

			#if( date._isDateRec_( _m_ ) )

				date._dayNumber( _m_ )

			#else

				#error( "dayNumber expected a daterec type as the parameter" )

			#endif

		#elseif( @elements( _dy_ ) = 2 )

			#if( date._isMDY_( _m_, @text( _dy_[0] ), @text( _dy_[1])) )

				date._dayNumber
				(
					#{
						pushw( @text(_dy_[1]) );
						push( ax );
						push( eax );
						mov( @text(_dy_[0]), al );
						mov( _m_, ah );
						mov( ax, [esp+4] );
						pop( eax );
					}#
				)

			#else

				#error( "Syntax error in dayNumber parameter list" );

			#endif

		#else

			#error
			( 
				"Error in dayNumber parameter list" nl
				"Usage: dayNumber( dr:daterec ) or " nl
				"       dayNumber( m:word; d:word; y:word )"
			)

		#endif

	#endmacro;











	procedure _daysLeft( dr:daterec ); 
		@returns( "eax" );
		@external( "DATE_DAYSLEFT" );

	#macro daysLeft( _m_, _dy_[] );

		#if( @elements( _dy_ ) = 0 )

			// y had better be a daterec object
			// if we had only one parameter.

			#if( date._isDateRec_( _m_ ) )

				date._daysLeft( _m_ )


			#else

				#error( "daysLeft expected a daterec type as the parameter" )

			#endif

		#elseif( @elements( _dy_ ) = 2 )


			#if( date._isMDY_( _m_, @text( _dy_[0] ), @text( _dy_[1])) )

				date._daysLeft
				(
					#{
						pushw( @text(_dy_[1]) );
						push( ax );
						push( eax );
						mov( @text(_dy_[0]), al );
						mov( _m_, ah );
						mov( ax, [esp+4] );
						pop( eax );
					}#
				)

			#else

				#error( "Syntax error in daysLeft parameter list" );

			#endif

		#else

			#error
			( 
				"Error in daysLeft parameter list" nl
				"Usage: daysLeft( dr:daterec ) or " nl
				"       daysLeft( m:word; d:word; y:word )"
			)

		#endif

	#endmacro;








	procedure _daysBetween( first:daterec; last:daterec ); 
		@returns( "eax" );
		@external( "DATE_DAYSBETWEEN" );

	#macro daysBetween( _m_, _dy_[] );

		#if( @elements( _dy_ ) = 1 )

			// _m_ and _dy_[0] had better be daterec objects
			// if we had only one parameter.

			#if( date._isDateRec_( _m_ ) & date._isDateRec_( _dy_[0] ))

				date._daysBetween( _m_, @text(_dy_[0]))

			#else

				#error
				( 
					"daysBetween expected a daterec type "
					"as the parameter" 
				)

			#endif

		#elseif( @elements( _dy_ ) = 3 )

			#if
			( 
					date._isMDY_( _m_, @text( _dy_[0] ), @text( _dy_[1]))
				&	date._isDateRec_( @text( _dy[2] ))
			)

				date._daysBetween
				(
					#{
						pushw( @text(_dy_[1]) );
						push( ax );
						push( eax );
						mov( @text(_dy_[0]), al );
						mov( _m_, ah );
						mov( ax, [esp+4] );
						pop( eax );
					}#,
					@text( _dy_[2] )
				)

			#elseif
			( 
					date._isDateRec_( _m_ )
				&	date._isMDY_
					( 
						@text( _dy_[0] ), 
						@text( _dy_[1]), 
						@text( _dy[2] )
					)
			)

				date._daysBetween
				(
					_m_,
					#{
						pushw( @text(_dy_[2]) );
						push( ax );
						push( eax );
						mov( @text(_dy_[1]), al );
						mov( @text(_dy_[0]), ah );
						mov( ax, [esp+4] );
						pop( eax );
					}#
				)

			#endif

		#elseif( @elements( _dy_ ) = 5 )

			#if
			( 
					date._isMDY_( _m_, @text( _dy_[0] ), @text( _dy_[1]))
				&	date._isMDY_
					( 
						@text( _dy_[2] ), 
						@text( _dy_[3]), 
						@text( _dy_[4] )
					)
			)

				date._daysBetween
				(
					#{
						pushw( @text(_dy_[1]) );
						push( ax );
						push( eax );
						mov( @text(_dy_[0]), al );
						mov( _m_, ah );
						mov( ax, [esp+4] );
						pop( eax );
					}#,
					#{
						pushw( @text(_dy_[4]) );
						push( ax );
						push( eax );
						mov( @text(_dy_[3]), al );
						mov( @text(_dy_[2]), ah );
						mov( ax, [esp+4] );
						pop( eax );
					}#
				)

			#else

				#error( "Syntax error in daysBetween parameter list" );

			#endif

		#else

			#error
			( 
				"Error in daysBetween parameter list"
			)

		#endif

	#endmacro;









	procedure _toString( dr:daterec; s:string );
		@external( "DATE_TOSTRING" );

	#macro toString( _m_, _dys_[] );

		#if( @elements( _dys_ ) = 1 )

			// y had better be a daterec object
			// if we had only one parameter.

			#if( date._isDateRec_( _m_ ) )

				date._toString( _m_, @text( _dys_[0] ) )

			#else

				#error( "toString expected a daterec type as the parameter" )

			#endif

		#elseif( @elements( _dys_ ) = 3 )

			#if( date._isMDY_( _m_, @text( _dy_[0] ), @text( _dy_[1])) )

				date._toString
				(
					#{
						pushw( @text(_dys_[1]) );
						push( ax );
						push( eax );
						mov( @text(_dys_[0]), al );
						mov( _m_, ah );
						mov( ax, [esp+4] );
						pop( eax );
					}#,
					@text( _dys_[2] )
				)

			#else

				#error( "Syntax error in toString parameter list" );

			#endif

		#else

			#error
			( 
				"Error in toString parameter list" nl
				"Usage: toString( dr:daterec; s:string ) or " nl
				"       toString( m:word; d:word; y:word; s:string )"
			)

		#endif

	#endmacro;



















	procedure _a_toString( dr:daterec ); 
		@external( "DATE_A_TOSTRING" );





	#macro a_toString( _m_, _dy_[] );

		#if( @elements( _dy_ ) = 0 )

			// y had better be a daterec object
			// if we had only one parameter.

			#if( date._isDateRec_( _m_ ) )

				date._a_toString( _m_ )

			#else

				#error
				( 
					"a_toString expected a daterec type "
					"as the parameter" 
				)

			#endif

		#elseif( @elements( _dy_ ) = 2 )

			#if( date._isMDY_( _m_, @text( _dy_[0] ), @text( _dy_[1])) )

				date._toString
				(
					#{
						pushw( @text(_dy_[1]) );
						push( ax );
						push( eax );
						mov( @text(_dy_[0]), al );
						mov( _m_, ah );
						mov( ax, [esp+4] );
						pop( eax );
					}#
				)

			#else

				#error( "Syntax error in a_toString parameter list" );

			#endif

		#else

			#error
			( 
				"Error in a_toString parameter list" nl
				"Usage: a_toString( dr:daterec ) or " nl
				"       a_toString( m:word; d:word; y:word )"
			)

		#endif

	#endmacro;







	procedure _print( dr:daterec ); 
		@external( "DATE_PRINT" );

	#macro print( _m_, _dy_[] );

		#if( @elements( _dy_ ) = 0 )

			// y had better be a daterec object
			// if we had only one parameter.

			#if( date._isDateRec_( _m_ ) )

				date._print( _m_ )

			#else

				#error
				( 
					"print expected a daterec type "
					"as the parameter" 
				)

			#endif

		#elseif( @elements( _dy_ ) = 2 )

			#if( date._isMDY_( _m_, @text( _dy_[0] ), @text( _dy_[1])) )

				date._print
				(
					#{
						pushw( @text(_dy_[1]) );
						push( ax );
						push( eax );
						mov( @text(_dy_[0]), al );
						mov( _m_, ah );
						mov( ax, [esp+4] );
						pop( eax );
					}#
				)

			#else

				#error( "Syntax error in print parameter list" );

			#endif

		#else

			#error
			( 
				"Error in print parameter list" nl
				"Usage: print( dr:daterec ) or " nl
				"       print( m:word; d:word; y:word )"
			)

		#endif

	#endmacro;






	static

		DaysToMonth: uns32[13]; @external( "DATE_DAYSTOMONTH" );
		DaysInMonth: uns32[13]; @external( "DATE_DAYSINMONTH" );
		DaysFromMonth: uns32[13]; @external( "DATE_DAYSFROMMONTH" );


end date;


#endif

